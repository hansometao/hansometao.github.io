<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Hansome Tao&#39; blog</title>
    <link>https://hansometao.github.io/posts/</link>
    <description>Recent content in Posts on Hansome Tao&#39; blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 22 Mar 2020 14:30:17 +0800</lastBuildDate>
    
	<atom:link href="https://hansometao.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>2 Python基本图形绘制</title>
      <link>https://hansometao.github.io/posts/2020-3-22-2-python%E5%9F%BA%E6%9C%AC%E5%9B%BE%E5%BD%A2%E7%BB%98%E5%88%B6/</link>
      <pubDate>Sun, 22 Mar 2020 14:30:17 +0800</pubDate>
      
      <guid>https://hansometao.github.io/posts/2020-3-22-2-python%E5%9F%BA%E6%9C%AC%E5%9B%BE%E5%BD%A2%E7%BB%98%E5%88%B6/</guid>
      <description>2.1 深入理解Python语言 计算机技术的演进 1946-1981 计算机系统结构时代 计算能力问题 1981-2008 网络和视窗时代 交互问题 2008-2016 复杂信息系统时代 数据问题 2017- 人工智能时代 人类的问题
编程语言的多样初心 不同编程语言的初心和使用对象 |编程语言 | 学习内容 | 语言本质 | 解决问题 | 适用对象| |&amp;mdash;|&amp;mdash;|&amp;mdash;|&amp;mdash;|&amp;mdash;| C | 指针、内存、数据类型 | 理解计算机系统结构 | 性能 | 计算机类专业 Java | 对象、多态、运行时 | 理解主客体关系 | 跨平台 | 软件类专业 C++ | 对象、多态、继承 | 理解主客体关系 | 大规模程序 | 计算机类专业 VB | 对象、按钮、文本框 | 理解交互逻辑 | 桌面应用 | 不确定 Python | 编程逻辑、第三方库 | 理解问题求解 | 各类问题 | 所有专业 各编程语言所处历史时期和使命不同，Python是计算时代演进的选择</description>
    </item>
    
    <item>
      <title>1 Python基本语法元素</title>
      <link>https://hansometao.github.io/posts/2020-3-22-1-python%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95%E5%85%83%E7%B4%A0/</link>
      <pubDate>Sun, 22 Mar 2020 14:28:40 +0800</pubDate>
      
      <guid>https://hansometao.github.io/posts/2020-3-22-1-python%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95%E5%85%83%E7%B4%A0/</guid>
      <description>1.1 程序设计基本方法 计算机与程序设计 计算机的概念 计算机是根据指令操作数据的设备
功能性：对数据的操作，表现为数据计算、输入输出处理和结果存储等
可编程性：根据一系列指令自动地、可预测地、准确地完成操作者的意图
计算机的发展 计算机的发展参照摩尔定律，表现为指数方式
程序设计 程序设计是计算机可编程性的体现
程序设计，亦称编程，深度应用计算机的主要手段
程序设计已经成为当今社会需求量最大的职业技能之一
很多岗位都将被计算机程序接管，程序设计将是生存技能
程序设计语言 程序设计语言是一种用于交互（交流）的人造语言
程序设计语言，亦称编程语言，程序设计的具体实现方式
编程语言相比自然语言更简单、更严谨、更精确
编程语言主要用于人类和计算机之间的交互
编程语言种类很多，但生命力强劲的却不多
编程语言有超过600种，绝大部分都不再被使用
C语言诞生于1972年，它是第一个被广泛使用的编程语言
Python语言诞生于1990年，它是最流行最好用的编程语言
编译和解释 编程语言的执行方式 计算机执行源程序的两种方式：编译和解释
源代码：采用某种编程语言编写的计算机程序，人类可读。
例如：result = 2 + 3
目标代码：计算机可直接执行，人类不可读（专家除外）
编译 将源代码一次性转换成目标代码的过程
执行编译过程的程序叫做编译器
解释 将源代码逐条转换成目标代码同时逐条运行的过程
执行解释过程的程序叫做解释器
编译与解释 编译：一次性翻译，之后不再需要源代码（类似英文翻译）
解释：每次程序运行时随翻译随执行（类似实时的同声传译）
静态语言和脚本语言 根据执行方式不同，编程语言分为两类
（1）静态语言：使用编译执行的编程语言，编译器一次性生成目标代码，优化更充分，程序运行速度更快，如C/C++语言
（2）脚本语言：使用解释执行的编程语言，执行程序时需要源代码，维护更灵活、可跨平台运行，如Python语言、JavaScript语言
程序的基本编写方法 IPO 程序的基本编写方法
I：Input输入，程序的输入
P：Process处理，程序的主要逻辑
O：Output输出，程序的输出
输入 程序的输入：文件输入、网络输入、控制台输入、交互界面输入、内部参数输入等
输入是一个程序的开始
输出 程序的输出：控制台输出、图形输出、文件输出、网络输出、操作系统内部变量输出等
输出是程序展示运算结果的方式
处理 处理是程序对输入数据进行计算产生输出结果的过程
处理方法统称为算法，它是程序最核心的部分
算法是一个程序的灵魂
问题的计算部分 一个待解决问题中，可以用程序辅助完成的部分
计算机只能解决计算问题，即问题的计算部分
一个问题可能有多种角度理解，产生不同的计算部分
问题的计算部分一般都有输入、处理和输出过程
编程解决问题的步骤 （1）分析问题：分析问题的计算部分，想清楚（2）划分边界：划分问题的功能边界，规划IPO（3）设计算法：设计问题的求解算法，关注算法（4）编写程序：编写问题的计算程序，编程序（5）调试测试：调试程序使正确运行，运行调试（6）升级维护：适应问题的升级维护，更新完善求解计算问题的精简步骤（3个精简步骤） （1）确定IPO：明确计算部分及功能边界</description>
    </item>
    
  </channel>
</rss>